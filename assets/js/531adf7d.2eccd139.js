"use strict";(self.webpackChunkgttp_documentation=self.webpackChunkgttp_documentation||[]).push([[544],{4008:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>a,default:()=>p,frontMatter:()=>r,metadata:()=>l,toc:()=>c});var i=n(8776),s=n(1232);const r={},a="Text",l={id:"syntax/types/text",title:"Text",description:"The text type can be used to define variables that accept text input.",source:"@site/docs/syntax/types/text.md",sourceDirName:"syntax/types",slug:"/syntax/types/text",permalink:"/syntax/types/text",draft:!1,unlisted:!1,editUrl:"https://github.com/gttp-cli/gttp/docs/syntax/types/text.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Number",permalink:"/syntax/types/number"}},o={},c=[{value:"Basic",id:"basic",level:2},{value:"Multiline",id:"multiline",level:2},{value:"Validation",id:"validation",level:2},{value:"Regex",id:"regex",level:3}];function d(e){const t={code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,s.M)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h1,{id:"text",children:"Text"}),"\n",(0,i.jsxs)(t.p,{children:["The ",(0,i.jsx)(t.code,{children:"text"})," type can be used to define variables that accept text input."]}),"\n",(0,i.jsx)(t.h2,{id:"basic",children:"Basic"}),"\n",(0,i.jsxs)(t.p,{children:["Basic syntax for the ",(0,i.jsx)(t.code,{children:"text"})," type:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-yaml",children:"variables:\n  - name: Name\n    type: text # Set the type to text\n    description: Name of the person\ntemplate: |-\n  Hello, {{ .Name }}!\n"})}),"\n",(0,i.jsx)(t.h2,{id:"multiline",children:"Multiline"}),"\n",(0,i.jsxs)(t.p,{children:["You can use the ",(0,i.jsx)(t.code,{children:"multiline"})," property to define a multiline text input:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-yaml",children:"variables:\n  - name: Description\n    type: text\n    multiline: true # Set the multiline property to true\n    description: Description of the person\ntemplate: |-\n  Description:\n  {{ .Description }}\n"})}),"\n",(0,i.jsx)(t.h2,{id:"validation",children:"Validation"}),"\n",(0,i.jsx)(t.h3,{id:"regex",children:"Regex"}),"\n",(0,i.jsxs)(t.p,{children:["You can use the ",(0,i.jsx)(t.code,{children:"regex"})," property to define a regular expression for validation:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-yaml",children:"variables:\n  - name: Text\n    type: text\n    regex: ^[a-z]+$ # only allow lowercase letters\n    description: A string of lowercase letters\ntemplate: |-\n  {{ .Text }}\n"})})]})}function p(e={}){const{wrapper:t}={...(0,s.M)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},1232:(e,t,n)=>{n.d(t,{I:()=>l,M:()=>a});var i=n(5508);const s={},r=i.createContext(s);function a(e){const t=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(r.Provider,{value:t},e.children)}}}]);